{"version":3,"sources":["components/status/index.js","config.js","components/useIssues.js","components/Component/statuses.js","components/Component/status.js","components/Component/useStatus.js","components/Component/index.js","components/App.js","serviceWorker.js","index.js"],"names":["StatusBar","styled","div","Reload","button","refetch","onClick","config","fetchData","setResults","fetch","user","then","response","json","data","localStorage","setItem","JSON","stringify","Date","catch","error","console","log","operational","name","colour","backgroundColour","performanceIssues","partialOutage","majorOutage","unknown","Status","props","color","labels","useState","status","setStatus","useEffect","Object","values","statuses","find","label","toLowerCase","useStatus","Component","issue","title","Container","results","getItem","parse","useIssues","map","key","id","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.23011dac.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst StatusBar = styled.div`\n  background-color: #3da751;\n  color: white;\n  padding: 8px 16px;\n  font-size: 20px;\n  border-radius: 3px;\n  margin: 32px 0;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst Reload = styled.button`\n  background-color: transparent;\n  color: white;\n  text-decoration: underline;\n  border: none;\n  cursor: pointer;\n`;\n\nexport default ({ refetch }) => {\n  return (\n    <StatusBar>\n      All Systems Operational <Reload onClick={refetch}>Reload</Reload>\n    </StatusBar>\n  );\n};\n","const config = {};\n\nconfig.user = \"tadhglewis\";\n\nexport default config;\n","import { useState, useEffect } from \"react\";\nimport config from \"../config\";\n\nexport default () => {\n  const [results, setResults] = useState();\n\n  useEffect(() => {\n    // GitHub rate limiting: 60 requests per hour/unauthenticated - fetches once per hour. Uses localStorage cache\n    if (\n      new Date(localStorage.getItem(\"issueStatusLastFetch\")) <\n      new Date() - 60 * 60 * 24 * 1000\n    ) {\n      fetchData(setResults);\n    } else {\n      setResults(JSON.parse(localStorage.getItem(\"issueStatusIssues\")));\n    }\n  }, []);\n\n  return [results, () => fetchData(setResults)];\n};\n\nconst fetchData = (setResults) =>\n  fetch(\n    `https://api.github.com/repos/${config.user}/issue-status/issues?labels=issue status`\n  )\n    .then((response) => {\n      // TODO: check response for GitHub rate limiting / any other possible issues\n      return response.json();\n    })\n    .then((data) => {\n      localStorage.setItem(\"issueStatusIssues\", JSON.stringify(data));\n      setResults(data);\n      localStorage.setItem(\"issueStatusLastFetch\", new Date());\n    })\n    .catch((error) => {\n      // TODO: handle errors\n      console.log(error);\n    });\n","export default {\n  operational: {\n    name: \"Operational\",\n    colour: \"#2c7e3c\",\n    backgroundColour: \"rgba(61, 167, 81, 0.1)\",\n  },\n  performanceIssues: {\n    name: \"Performance Issues\",\n    colour: \"#2a5e9b\",\n    backgroundColour: \"rgba(73, 144, 226, 0.1)\",\n  },\n  partialOutage: {\n    name: \"Partial Outage\",\n    colour: \"#b18741\",\n    backgroundColour: \"rgba(255, 198, 103, 0.1)\",\n  },\n  majorOutage: {\n    name: \"Major Outage\",\n    colour: \"#b12715\",\n    backgroundColour: \"rgba(217, 68, 48, 0.1)\",\n  },\n  unknown: {\n    name: \"Unknown\",\n    colour: \"#8c8c8c\",\n    backgroundColour: \"rgba(177, 177, 177, 0.1)\",\n  },\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport useStatus from \"./useStatus\";\n\nconst Status = styled.div`\n  color: ${(props) => props.color};\n  background-color: ${(props) => props.backgroundColour};\n  padding: 5px 12px;\n  border-radius: 16px;\n`;\n\nexport default ({ labels }) => {\n  const [status] = useStatus(labels);\n\n  return (\n    <Status color={status?.colour} backgroundColour={status?.backgroundColour}>\n      {status?.name}\n    </Status>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport statuses from \"./statuses\";\n\nexport default (labels) => {\n  const [status, setStatus] = useState();\n\n  useEffect(() => {\n    setStatus(\n      Object.values(statuses).find((status) =>\n        labels.find((label) => label.name === status.name.toLowerCase())\n      )\n    );\n  }, [labels]);\n\n  if (!status) setStatus(statuses.unknown);\n\n  return [status];\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Status from \"./status\";\n\nconst Component = styled.div`\n  background-color: #f7f8f9;\n  padding: 8px 16px;\n  border-radius: 3px;\n  justify-content: space-between;\n  align-items: center;\n  display: flex;\n\n  :not(:last-child) {\n    margin-bottom: 8px;\n  }\n`;\n\nexport default ({ issue }) => {\n  return (\n    <Component>\n      {issue.title} <Status labels={issue.labels} />\n    </Component>\n  );\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\nimport Status from \"./status\";\nimport useIssues from \"./useIssues\";\nimport Component from \"./Component\";\n\nconst Container = styled.div`\n  max-width: 1008px;\n  margin: 16px auto;\n  background-color: white;\n  border-radius: 3px;\n  padding: 16px;\n  box-shadow: 0px 0px 33px -32px rgba(0, 0, 0, 0.75);\n`;\n\nexport default () => {\n  // TODO: handle loading\n  const [results, refetch] = useIssues();\n\n  return (\n    <Container>\n      <Status refetch={refetch} />\n      {results?.map((issue) => (\n        <Component key={issue.id} issue={issue} />\n      ))}\n    </Container>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}