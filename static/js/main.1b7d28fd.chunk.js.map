{"version":3,"sources":["components/status/index.js","config.js","components/useIssues.js","components/incidents/incident/index.js","components/incidents/skeleton.js","components/incidents/index.js","components/components/skeleton.js","components/components/component/statuses.js","components/components/component/status.js","components/components/component/useStatus.js","components/components/component/index.js","components/components/index.js","components/header/index.js","components/App.js","serviceWorker.js","index.js"],"names":["StatusBar","styled","div","Reload","button","Code","code","refetch","error","hasError","JSON","stringify","errors","onClick","config","label","useState","results","setResults","setError","loading","setLoading","useEffect","Date","localStorage","getItem","fetchData","parse","fetch","user","then","response","json","data","setItem","catch","toString","Incident","props","active","Header","Title","Comment","Status","Created","incident","closed_at","created_at","toLocaleString","title","body","Container","NoFound","incidents","length","map","key","id","operational","name","colour","backgroundColour","performanceIssues","partialOutage","majorOutage","unknown","labels","status","setStatus","Object","values","statuses","find","toLowerCase","useStatus","Component","component","components","h1","Logo","img","logo","src","alt","ComponentsContainer","useIssues","componentsLoading","componentsError","componentsResults","componentsRefetch","incidentsLoading","incidentsError","incidentsResults","incidentsRefetch","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"w0BAGA,IAAMA,EAAYC,IAAOC,IAAV,KAYTC,EAASF,IAAOG,OAAV,KAQNC,EAAOJ,IAAOK,KAAV,KAKK,cAAyB,IAAtBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MACzB,OACE,oCACGA,EAAMC,UACL,kBAACJ,EAAD,KACE,iDACA,oHAICK,KAAKC,UAAUH,EAAMI,OAAQ,KAAM,IAGxC,kBAACZ,EAAD,gCAC0B,kBAACG,EAAD,CAAQU,QAASN,GAAjB,aC1C1BO,EAAS,CAEfA,KAAc,GACdA,KAAc,eACdA,KAAc,cAECA,ICHA,WAACC,GAAW,IAAD,EACMC,mBAAS,IADf,mBACjBC,EADiB,KACRC,EADQ,OAEEF,qBAFF,mBAEjBR,EAFiB,KAEVW,EAFU,OAGMH,oBAAS,GAHf,mBAGjBI,EAHiB,KAGRC,EAHQ,KAmBxB,OAdAC,qBAAU,WAGN,IAAIC,KAAKC,aAAaC,QAAb,8BAA4CV,KACrD,IAAIQ,KAAS,KAEbG,EAAUL,EAAYF,EAAUD,EAAYH,IAE5CG,EAAWR,KAAKiB,MAAMH,aAAaC,QAAb,qBAAmCV,MACzDM,GAAW,GACXF,OAED,IAEI,CACLC,EACAZ,EACAS,EACA,kBAAMS,EAAUL,EAAYF,EAAUD,EAAYH,MAIhDW,EAAY,SAACL,EAAYF,EAAUD,EAAYH,GACnDM,GAAW,GACXO,MAAM,gCAAD,OAC6Bd,EAAOe,KADpC,8DAC8Fd,IAEhGe,MAAK,SAACC,GACL,OAAOA,EAASC,UAEjBF,MAAK,SAACG,GACLT,aAAaU,QAAb,8BAA4CnB,GAAS,IAAIQ,MACzDC,aAAaU,QAAb,qBAAmCnB,GAASL,KAAKC,UAAUsB,IAC3Df,EAAWe,GACXZ,GAAW,GACXF,OAEDgB,OAAM,SAAC3B,GACNW,EAASX,EAAM4B,YACflB,EAAWR,KAAKiB,MAAMH,aAAaC,QAAb,qBAAmCV,MACzDM,GAAW,O,+jCC7CjB,IAAMgB,EAAWpC,IAAOC,IAAV,KAER,SAACoC,GAAD,OACAA,EAAMC,OAAS,0BAA4B,6BAY3CC,EAASvC,IAAOC,IAAV,KAONuC,EAAQxC,IAAOC,IAAV,KAOLwC,EAAUzC,IAAOC,IAAV,KAKPyC,EAAS1C,IAAOC,IAAV,KACD,SAACoC,GAAD,OAAYA,EAAMC,OAAS,UAAY,aAC5B,SAACD,GAAD,OAClBA,EAAMC,OAAS,2BAA6B,6BAM1CK,EAAU3C,IAAOC,IAAV,KAOE,kBAAG2C,EAAH,EAAGA,SAAH,OACb,kBAACR,EAAD,CAAUE,OAAQM,EAASC,WACzB,kBAACN,EAAD,KACE,6BACE,kBAACI,EAAD,KAAU,IAAIrB,KAAKsB,EAASE,YAAYC,kBACxC,kBAACP,EAAD,KAAQI,EAASI,QAEnB,kBAACN,EAAD,CAAQJ,OAAQM,EAASC,WACtBD,EAASC,UAAY,SAAW,WAGrC,kBAACJ,EAAD,KAAUG,EAASK,Q,yQC9DRjD,UAAOC,IAAtB,K,0VCGA,IAAMiD,EAAYlD,IAAOC,IAAV,KAKTuC,EAAQxC,IAAOC,IAAV,KAMLkD,EAAUnD,IAAOC,IAAV,KAIE,cAA6B,IAA1BkB,EAAyB,EAAzBA,QAASiC,EAAgB,EAAhBA,UACzB,OACE,kBAACF,EAAD,KACE,kBAAC,EAAD,kBACE/B,EASA,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QAXO,OAATiC,QAAS,IAATA,OAAA,EAAAA,EAAWC,QAAS,EAApB,OACED,QADF,IACEA,OADF,EACEA,EAAWE,KAAI,SAACV,GAAD,OACb,kBAAC,EAAD,CAAUW,IAAKX,EAASY,GAAIZ,SAAUA,OAGxC,kBAACO,EAAD,8B,oNC5BKnD,UAAOC,IAAtB,KCFe,GACbwD,YAAa,CACXC,KAAM,cACNC,OAAQ,UACRC,iBAAkB,0BAEpBC,kBAAmB,CACjBH,KAAM,qBACNC,OAAQ,UACRC,iBAAkB,2BAEpBE,cAAe,CACbJ,KAAM,iBACNC,OAAQ,UACRC,iBAAkB,4BAEpBG,YAAa,CACXL,KAAM,eACNC,OAAQ,UACRC,iBAAkB,0BAEpBI,QAAS,CACPN,KAAM,UACNC,OAAQ,UACRC,iBAAkB,6B,kLCpBtB,IAAMlB,EAAS1C,IAAOC,IAAV,KACD,SAACoC,GAAD,OAAWA,EAAMsB,UACN,SAACtB,GAAD,OAAWA,EAAMuB,oBAMxB,cAAiB,IAAD,ECThB,SAACK,GAAY,IAAD,EACGlD,qBADH,mBAClBmD,EADkB,KACVC,EADU,KAazB,OAVA9C,qBAAU,WACR8C,EACEC,OAAOC,OAAOC,GAAUC,MAAK,SAACL,GAAD,OAC3BD,EAAOM,MAAK,SAACzD,GAAD,OAAWA,EAAM4C,OAASQ,EAAOR,KAAKc,uBAGrD,CAACP,IAECC,GAAQC,EAAUG,EAASN,SAEzB,CAACE,GDHSO,CADY,EAAbR,QACTC,EADsB,oBAG7B,OACE,kBAAC,EAAD,CAAQP,OAAM,OAAEO,QAAF,IAAEA,OAAF,EAAEA,EAAQP,OAAQC,iBAAgB,OAAEM,QAAF,IAAEA,OAAF,EAAEA,EAAQN,kBAA1D,OACGM,QADH,IACGA,OADH,EACGA,EAAQR,O,sREbf,IAAMgB,EAAY1E,IAAOC,IAAV,KAaA,cAAoB,IAAjB0E,EAAgB,EAAhBA,UAChB,OACE,kBAACD,EAAD,KACGC,EAAU3B,MADb,IACoB,kBAAC,EAAD,CAAQiB,OAAQU,EAAUV,WChBnC,cAA8B,IAA3B9C,EAA0B,EAA1BA,QAASyD,EAAiB,EAAjBA,WACzB,OAAQzD,EASN,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QAXQ,OAAVyD,QAAU,IAAVA,OAAA,EAAAA,EAAYvB,QAAS,EAArB,OACEuB,QADF,IACEA,OADF,EACEA,EAAYtB,KAAI,SAACqB,GAAD,OACd,kBAAC,EAAD,CAAWpB,IAAKoB,EAAUnB,GAAImB,UAAWA,OAG3C,oD,+SCPN,IAAMnC,GAAQxC,IAAO6E,GAAV,MAKLC,GAAO9E,IAAO+E,IAAV,MAEJxC,GAASvC,IAAOC,IAAV,KAKG,qBACbY,EAAOmE,MAAQnE,EAAO6C,KACpB,kBAAC,GAAD,KACG7C,EAAOmE,KACN,kBAACF,GAAD,CAAMG,IAAKpE,EAAOmE,KAAME,IAAKrE,EAAO6C,OAEpC,kBAAC,GAAD,KAAQ7C,EAAO6C,OAGjB,M,4UChBN,IAAMR,GAAYlD,IAAOC,IAAV,MAMTkF,GAAsBnF,IAAOC,IAAV,MAOV,cAAM,MAOfmF,EAAU,aAPK,mBAGjBC,EAHiB,KAIjBC,EAJiB,KAKjBC,EALiB,KAMjBC,EANiB,OAafJ,EAAU,YAbK,mBASjBK,EATiB,KAUjBC,EAViB,KAWjBC,EAXiB,KAYjBC,EAZiB,KAenB,OACE,kBAAC,GAAD,KACE,kBAAC,GAAD,MACA,kBAACT,GAAD,KACE,kBAAC,EAAD,CACE7E,QAAS,WACPkF,IACAI,KAEFrF,MAAO,CACLC,SAAU8E,GAAmBI,EAC7B/E,OAAQ,CAAE2E,kBAAiBI,qBAG/B,kBAAC,EAAD,CACEvE,QAASkE,EACTT,WAAYW,KAGhB,kBAAC,EAAD,CAAWpE,QAASsE,EAAkBrC,UAAWuC,MC5CnCE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5E,MAAK,SAAA6E,GACJA,EAAaC,gBAEdzE,OAAM,SAAA3B,GACLqG,QAAQrG,MAAMA,EAAMsG,c","file":"static/js/main.1b7d28fd.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst StatusBar = styled.div`\n  background-color: #3da751;\n  color: white;\n  padding: 16px;\n  font-size: 20px;\n  border-radius: 3px;\n  margin-bottom: 32px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst Reload = styled.button`\n  background-color: transparent;\n  color: white;\n  text-decoration: underline;\n  border: none;\n  cursor: pointer;\n`;\n\nconst Code = styled.code`\n  white-space: pre-wrap;\n`;\n\n// TODO: change all systems status based on current status of all components\nexport default ({ refetch, error }) => {\n  return (\n    <>\n      {error.hasError && (\n        <Code>\n          <div>An error occured</div>\n          <div>\n            You may have exceeded the rate limit. Try again in 1 hour to fetch\n            the latest data.\n          </div>\n          {JSON.stringify(error.errors, null, 3)}\n        </Code>\n      )}\n      <StatusBar>\n        All Systems Operational <Reload onClick={refetch}>Reload</Reload>\n      </StatusBar>\n    </>\n  );\n};\n","const config = {};\n\nconfig.logo = \"\";\nconfig.name = \"Issue Status\";\nconfig.user = \"tadhglewis\";\n\nexport default config;\n","import { useState, useEffect } from \"react\";\nimport config from \"../config\";\n\nexport default (label) => {\n  const [results, setResults] = useState([]);\n  const [error, setError] = useState();\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // GitHub rate limiting: 60 requests per hour/unauthenticated - fetches 15 times per hour / sending 30 requests (2 requests per fetch) and caches in localStorage\n    if (\n      new Date(localStorage.getItem(`issueStatusLastFetch${label}`)) <\n      new Date() - 180000\n    ) {\n      fetchData(setLoading, setError, setResults, label);\n    } else {\n      setResults(JSON.parse(localStorage.getItem(`issueStatus${label}`)));\n      setLoading(false);\n      setError();\n    }\n  }, []);\n\n  return [\n    loading,\n    error,\n    results,\n    () => fetchData(setLoading, setError, setResults, label),\n  ];\n};\n\nconst fetchData = (setLoading, setError, setResults, label) => {\n  setLoading(true);\n  fetch(\n    `https://api.github.com/repos/${config.user}/issue-status/issues?state=all&labels=issue status,${label}`\n  )\n    .then((response) => {\n      return response.json();\n    })\n    .then((data) => {\n      localStorage.setItem(`issueStatusLastFetch${label}`, new Date());\n      localStorage.setItem(`issueStatus${label}`, JSON.stringify(data));\n      setResults(data);\n      setLoading(false);\n      setError();\n    })\n    .catch((error) => {\n      setError(error.toString());\n      setResults(JSON.parse(localStorage.getItem(`issueStatus${label}`)));\n      setLoading(false);\n    });\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Incident = styled.div`\n  border-left: 16px solid\n    ${(props) =>\n      props.active ? \"rgba(177, 177, 177,0.2)\" : \"rgba(73, 144, 226, 0.2)\"};\n  background-color: white;\n  border-radius: 3px;\n  padding: 16px;\n  box-shadow: 0px 0px 33px -32px rgba(0, 0, 0, 0.75);\n  margin-top: 8px;\n\n  :not(:last-child) {\n    margin-bottom: 16px;\n  }\n`;\n\nconst Header = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: end;\n  margin-bottom: 3px;\n`;\n\nconst Title = styled.div`\n  margin-right: 16px;\n  font-weight: bold;\n  margin-bottom: 8px;\n  color: #1e1e1e;\n`;\n\nconst Comment = styled.div`\n  white-space: break-spaces;\n  color: #1e1e1e;\n`;\n\nconst Status = styled.div`\n  color: ${(props) => (props.active ? \"#6e6b6b\" : \"#2f5888\")};\n  background-color: ${(props) =>\n    props.active ? \"rgba(177, 177, 177, 0.1)\" : \"rgba(73, 144, 226, 0.1)\"};\n  padding: 5px 12px;\n  border-radius: 16px;\n  font-size: 13px;\n`;\n\nconst Created = styled.div`\n  margin-bottom: 8px;\n  font-size: 13px;\n  color: #6e6b6b;\n  font-weight: bold;\n`;\n\nexport default ({ incident }) => (\n  <Incident active={incident.closed_at}>\n    <Header>\n      <div>\n        <Created>{new Date(incident.created_at).toLocaleString()}</Created>\n        <Title>{incident.title}</Title>\n      </div>\n      <Status active={incident.closed_at}>\n        {incident.closed_at ? \"Closed\" : \"Active\"}\n      </Status>\n    </Header>\n    <Comment>{incident.body}</Comment>\n  </Incident>\n);\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  width: 100%;\n  height: 84px;\n  border-radius: 3px;\n  background-color: white;\n  box-shadow: 0px 0px 33px -32px rgba(0, 0, 0, 0.75);\n\n  :not(:last-child) {\n    margin-bottom: 8px;\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Incident from \"./incident\";\nimport Skeleton from \"./skeleton\";\n\nconst Container = styled.div`\n  margin: 32px auto 0 auto;\n  max-width: 1040px;\n`;\n\nconst Title = styled.div`\n  padding: 0 16px;\n  font-size: 20px;\n  margin-bottom: 16px;\n`;\n\nconst NoFound = styled.div`\n  margin: 0 8px;\n`;\n\nexport default ({ loading, incidents }) => {\n  return (\n    <Container>\n      <Title>Incidents</Title>\n      {!loading ? (\n        incidents?.length > 0 ? (\n          incidents?.map((incident) => (\n            <Incident key={incident.id} incident={incident} />\n          ))\n        ) : (\n          <NoFound>No Incidents found.</NoFound>\n        )\n      ) : (\n        <>\n          <Skeleton />\n          <Skeleton />\n          <Skeleton />\n        </>\n      )}\n    </Container>\n  );\n};\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  width: 100%;\n  height: 44px;\n  border-radius: 3px;\n  background-color: #f7f8f9;\n\n  :not(:last-child) {\n    margin-bottom: 8px;\n  }\n`;\n","export default {\n  operational: {\n    name: \"Operational\",\n    colour: \"#247234\",\n    backgroundColour: \"rgba(61, 167, 81, 0.1)\",\n  },\n  performanceIssues: {\n    name: \"Performance Issues\",\n    colour: \"#2f5888\",\n    backgroundColour: \"rgba(73, 144, 226, 0.1)\",\n  },\n  partialOutage: {\n    name: \"Partial Outage\",\n    colour: \"#74582a\",\n    backgroundColour: \"rgba(255, 198, 103, 0.1)\",\n  },\n  majorOutage: {\n    name: \"Major Outage\",\n    colour: \"#8e3b31\",\n    backgroundColour: \"rgba(217, 68, 48, 0.1)\",\n  },\n  unknown: {\n    name: \"Unknown\",\n    colour: \"#6e6b6b\",\n    backgroundColour: \"rgba(177, 177, 177, 0.1)\",\n  },\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport useStatus from \"./useStatus\";\n\nconst Status = styled.div`\n  color: ${(props) => props.colour};\n  background-color: ${(props) => props.backgroundColour};\n  padding: 5px 12px;\n  border-radius: 16px;\n  font-size: 13px;\n`;\n\nexport default ({ labels }) => {\n  const [status] = useStatus(labels);\n\n  return (\n    <Status colour={status?.colour} backgroundColour={status?.backgroundColour}>\n      {status?.name}\n    </Status>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport statuses from \"./statuses\";\n\nexport default (labels) => {\n  const [status, setStatus] = useState();\n\n  useEffect(() => {\n    setStatus(\n      Object.values(statuses).find((status) =>\n        labels.find((label) => label.name === status.name.toLowerCase())\n      )\n    );\n  }, [labels]);\n\n  if (!status) setStatus(statuses.unknown);\n\n  return [status];\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Status from \"./status\";\n\nconst Component = styled.div`\n  background-color: #f7f8f9;\n  padding: 8px 16px;\n  border-radius: 3px;\n  justify-content: space-between;\n  align-items: center;\n  display: flex;\n\n  :not(:last-child) {\n    margin-bottom: 8px;\n  }\n`;\n\nexport default ({ component }) => {\n  return (\n    <Component>\n      {component.title} <Status labels={component.labels} />\n    </Component>\n  );\n};\n","import React from \"react\";\nimport Skeleton from \"./skeleton\";\nimport Component from \"./component\";\n\nexport default ({ loading, components }) => {\n  return !loading ? (\n    components?.length > 0 ? (\n      components?.map((component) => (\n        <Component key={component.id} component={component} />\n      ))\n    ) : (\n      <p>No Components found.</p>\n    )\n  ) : (\n    <>\n      <Skeleton />\n      <Skeleton />\n      <Skeleton />\n    </>\n  );\n};\n","import React from \"react\";\nimport config from \"../../config\";\nimport styled from \"styled-components\";\n\nconst Title = styled.h1`\n  text-align: center;\n  margin-top: 0;\n`;\n\nconst Logo = styled.img``;\n\nconst Header = styled.div`\n  text-align: center;\n  margin-bottom: 16px;\n`;\n\nexport default () =>\n  config.logo || config.name ? (\n    <Header>\n      {config.logo ? (\n        <Logo src={config.logo} alt={config.name} />\n      ) : (\n        <Title>{config.name}</Title>\n      )}\n    </Header>\n  ) : null;\n","import React from \"react\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\nimport Status from \"./status\";\nimport useIssues from \"./useIssues\";\nimport Incidents from \"./incidents\";\nimport Components from \"./components\";\nimport Header from \"./header\";\n\nconst Container = styled.div`\n  max-width: 1008px;\n  padding: 16px;\n  margin: 16px auto;\n`;\n\nconst ComponentsContainer = styled.div`\n  box-shadow: 0px 0px 33px -32px rgba(0, 0, 0, 0.75);\n  border-radius: 3px;\n  background-color: white;\n  padding: 16px;\n`;\n\nexport default () => {\n  // loading, errors, results, refetch\n  const [\n    componentsLoading,\n    componentsError,\n    componentsResults,\n    componentsRefetch,\n  ] = useIssues(\"component\");\n  const [\n    incidentsLoading,\n    incidentsError,\n    incidentsResults,\n    incidentsRefetch,\n  ] = useIssues(\"incident\");\n\n  return (\n    <Container>\n      <Header />\n      <ComponentsContainer>\n        <Status\n          refetch={() => {\n            componentsRefetch();\n            incidentsRefetch();\n          }}\n          error={{\n            hasError: componentsError || incidentsError,\n            errors: { componentsError, incidentsError },\n          }}\n        />\n        <Components\n          loading={componentsLoading}\n          components={componentsResults}\n        />\n      </ComponentsContainer>\n      <Incidents loading={incidentsLoading} incidents={incidentsResults} />\n    </Container>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}